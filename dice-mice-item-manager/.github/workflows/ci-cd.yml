name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  # Unit and Integration Tests
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage -- --watchAll=false

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        if: always()

  # Build Application
  build:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: .next/
          retention-days: 1

  # End-to-End Tests
  test-e2e:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          TURSO_DATABASE_URL: file:test.db
          TURSO_AUTH_TOKEN: test-token
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-e2e
          DISCORD_CLIENT_ID: test-client-id
          DISCORD_CLIENT_SECRET: test-client-secret

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-videos
          path: test-results/
          retention-days: 30

  # Database Migration Check
  check-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check if migrations directory exists
        run: |
          if [ -d "src/db/migrations" ]; then
            echo "✅ Migrations directory exists"
            find src/db/migrations -name "*.sql" -exec echo "Found migration: {}" \; || echo "No SQL migrations found"
          else
            echo "ℹ️ No migrations directory found, skipping migration check"
          fi

      - name: Generate migrations to check for schema drift
        run: |
          # Generate migrations to check for schema drift
          npm run db:generate || echo "Migration generation failed or no changes needed"

          # Check if any new migration files were generated
          if git diff --exit-code src/db/migrations/ 2>/dev/null || [ ! -d "src/db/migrations" ]; then
            echo "✅ No schema drift detected"
          else
            echo "❌ Schema drift detected! Run 'npm run db:generate' and commit the changes."
            git diff src/db/migrations/
            exit 1
          fi

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate || echo "Security audit completed with warnings"

  # Performance Budget Check
  performance-check:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/

      - name: Analyze bundle size
        run: |
          # Check if bundle size is reasonable
          if [ -d ".next/static" ]; then
            BUNDLE_SIZE=$(du -sb .next/static 2>/dev/null | cut -f1 || echo "0")
            MAX_SIZE=$((10 * 1024 * 1024)) # 10MB limit
            
            if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
              echo "❌ Bundle size ($BUNDLE_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
              exit 1
            else
              echo "✅ Bundle size ($BUNDLE_SIZE bytes) is within limits"
            fi
          else
            echo "ℹ️ No build artifacts found, skipping bundle size check"
          fi

  # Summary Job
  test-summary:
    runs-on: ubuntu-latest
    needs:
      [
        lint-and-typecheck,
        test-unit,
        build,
        test-e2e,
        check-migrations,
        security-audit,
        performance-check,
      ]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "=== Test Summary ==="
          echo "Lint and TypeCheck: ${{ needs.lint-and-typecheck.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Migration Check: ${{ needs.check-migrations.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Performance Check: ${{ needs.performance-check.result }}"

          # Check if any critical jobs failed
          if [[ "${{ needs.lint-and-typecheck.result }}" == "failure" || 
                "${{ needs.test-unit.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed"
            exit 1
          else
            echo "✅ All critical jobs passed"
          fi
